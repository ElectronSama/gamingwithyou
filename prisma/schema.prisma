// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String?
  bio               String?
  avatar            String?
  isAdmin           Boolean  @default(false)
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userLanguages     UserLanguage[]
  userGames         UserGame[]
  userTags          UserTag[]
  userAvailability  UserAvailability[]
  bookingsAsProvider Booking[] @relation("BookingProvider")
  bookingsAsCustomer Booking[] @relation("BookingCustomer")
  fixedServices     FixedService[]
  serviceOrdersAsCustomer ServiceOrder[] @relation("ServiceOrderCustomer")
  serviceOrdersAsProvider ServiceOrder[] @relation("ServiceOrderProvider")
  discounts         Discount[]
  gameNews          GameNews[]
  gameEvents        GameEvent[]
  gameEasterEggs    GameEasterEgg[]


  @@map("users")
}

model UserLanguage {
  id     String @id @default(cuid())
  userId String
  language String
  level   String // beginner, intermediate, advanced, native

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, language])
  @@map("user_languages")
}

model UserGame {
  id       String @id @default(cuid())
  userId   String
  gameId   String
  level    String // beginner, intermediate, advanced, expert
  platform String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId, platform, level])
  @@map("user_games")
}

model UserTag {
  id     String @id @default(cuid())
  userId String
  tag    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tag])
  @@map("user_tags")
}

model UserAvailability {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:mm format
  endTime   String   // HH:mm format
  price     Float
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_availability")
}

model Game {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  genre       String?
  platform    String?
  releaseDate DateTime?
  rating      Float?
  isActive    Boolean  @default(true)
  
  // IGDB Integration
  igdbId      Int?     @unique
  igdbSlug    String?  @unique
  igdbRating  Float?
  igdbRatingCount Int?
  igdbCoverUrl String?
  igdbScreenshots String[] // JSON array of screenshot URLs
  igdbVideos  String[] // JSON array of video IDs
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userGames   UserGame[]
  bookings   Booking[]
  gameNews    GameNews[]
  gameEvents  GameEvent[]
  gameEasterEggs GameEasterEgg[]

  @@map("games")
}

model Booking {
  id          String   @id @default(cuid())
  providerId  String
  customerId  String
  gameId      String?
  date        DateTime
  startTime   String   // HH:mm format
  endTime     String   // HH:mm format
  duration    Int      // minutes
  price       Float
  status      String   @default("pending") // pending, confirmed, completed, cancelled
  notes       String?
  stripePaymentIntentId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider User @relation("BookingProvider", fields: [providerId], references: [id])
  customer User @relation("BookingCustomer", fields: [customerId], references: [id])
  game     Game? @relation(fields: [gameId], references: [id])

  @@map("bookings")
}

model FixedService {
  id          String   @id @default(cuid())
  providerId  String
  title       String
  description String
  price       Float
  duration    Int      // minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider User @relation(fields: [providerId], references: [id], onDelete: Cascade)
  orders    ServiceOrder[]

  @@map("fixed_services")
}

model ServiceOrder {
  id              String   @id @default(cuid())
  serviceId       String
  customerId      String
  providerId      String
  status          String   @default("pending") // pending, in_progress, completed, cancelled
  customerNotes   String?
  providerNotes   String?
  price           Float
  deadline        DateTime?
  completedAt     DateTime?
  stripePaymentIntentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  service  FixedService @relation(fields: [serviceId], references: [id])
  customer User @relation("ServiceOrderCustomer", fields: [customerId], references: [id])
  provider User @relation("ServiceOrderProvider", fields: [providerId], references: [id])

  @@map("service_orders")
}

model Discount {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String   // percentage, fixed
  value       Float
  maxUses     Int?
  usedCount   Int      @default(0)
  validFrom   DateTime @default(now())
  validUntil  DateTime?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("discounts")
}

model GameNews {
  id        String   @id @default(cuid())
  gameId    String
  title     String
  content   String
  image     String?
  authorId  String
  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])

  @@map("game_news")
}

model GameEvent {
  id          String   @id @default(cuid())
  gameId      String
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String?
  isOnline    Boolean  @default(false)
  maxParticipants Int?
  currentParticipants Int @default(0)
  createdBy   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game    Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  creator User @relation(fields: [createdBy], references: [id])

  @@map("game_events")
}

model GameEasterEgg {
  id          String   @id @default(cuid())
  gameId      String
  title       String
  description String
  difficulty  String   // easy, medium, hard
  createdBy   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game    Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  creator User @relation(fields: [createdBy], references: [id])

  @@map("game_easter_eggs")
}

 